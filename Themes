
import React, { useState, useEffect, useCallback } from "react";
import { Question } from "@/entities/Question";
import { motion } from "framer-motion";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { BookOpen, Users, Briefcase, Leaf, Plane, Monitor } from "lucide-react";

const themeIcons = {
  "Familie und Freundschaft": Users,
  "Schule und Bildung": BookOpen,
  "Arbeit und Beruf": Briefcase,
  "Umwelt und Nachhaltigkeit": Leaf,
  "Reisen und Tourismus": Plane,
  "Technologie und Medien": Monitor,
  "Kultur und Tradition": BookOpen,
  "Geschichte und Politik": BookOpen,
  "Sport und Freizeit": BookOpen,
  "Gesundheit und Lebensstil": BookOpen,
  "Literatur und Kunst": BookOpen,
  "Deutsche Gesellschaft": BookOpen,
  "Globalisierung": BookOpen,
  "Jugend und Identität": BookOpen,
  "Integration und Migration": BookOpen
};

const themeColors = {
  "Familie und Freundschaft": "bg-pink-100 text-pink-800 border-pink-200",
  "Schule und Bildung": "bg-blue-100 text-blue-800 border-blue-200",
  "Arbeit und Beruf": "bg-purple-100 text-purple-800 border-purple-200",
  "Umwelt und Nachhaltigkeit": "bg-green-100 text-green-800 border-green-200",
  "Reisen und Tourismus": "bg-orange-100 text-orange-800 border-orange-200",
  "Technologie und Medien": "bg-indigo-100 text-indigo-800 border-indigo-200",
  "Kultur und Tradition": "bg-amber-100 text-amber-800 border-amber-200",
  "Geschichte und Politik": "bg-red-100 text-red-800 border-red-200",
  "Sport und Freizeit": "bg-cyan-100 text-cyan-800 border-cyan-200",
  "Gesundheit und Lebensstil": "bg-emerald-100 text-emerald-800 border-emerald-200",
  "Literatur und Kunst": "bg-violet-100 text-violet-800 border-violet-200",
  "Deutsche Gesellschaft": "bg-slate-100 text-slate-800 border-slate-200",
  "Globalisierung": "bg-teal-100 text-teal-800 border-teal-200",
  "Jugend und Identität": "bg-rose-100 text-rose-800 border-rose-200",
  "Integration und Migration": "bg-lime-100 text-lime-800 border-lime-200"
};

export default function ThemesPage() {
  const [questions, setQuestions] = useState([]);
  const [themeStats, setThemeStats] = useState({});
  const [isLoading, setIsLoading] = useState(true);

  const calculateThemeStats = useCallback((questions) => {
    const stats = {};
    questions.forEach(question => {
      const theme = question.theme;
      if (!stats[theme]) {
        stats[theme] = {
          total: 0,
          continuers: 0,
          extension: 0,
          years: new Set()
        };
      }
      stats[theme].total++;
      stats[theme][question.paper_type]++;
      stats[theme].years.add(question.year);
    });
    
    // Convert years Set to array for easier handling
    Object.keys(stats).forEach(theme => {
      stats[theme].yearRange = Array.from(stats[theme].years).sort((a, b) => b - a);
    });
    
    setThemeStats(stats);
  }, []);

  const loadQuestions = useCallback(async () => {
    setIsLoading(true);
    try {
      const fetchedQuestions = await Question.list();
      setQuestions(fetchedQuestions);
      calculateThemeStats(fetchedQuestions);
    } catch (error) {
      console.error("Error loading questions:", error);
    }
    setIsLoading(false);
  }, [calculateThemeStats]);

  useEffect(() => {
    loadQuestions();
  }, [loadQuestions]);

  const sortedThemes = Object.entries(themeStats).sort(([, a], [, b]) => b.total - a.total);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1 className="text-3xl md:text-4xl font-bold text-slate-900 mb-2">
            Browse by Theme
          </h1>
          <p className="text-slate-600">
            Explore questions organized by key German language themes and topics
          </p>
        </motion.div>

        {isLoading ? (
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {Array(9).fill(0).map((_, i) => (
              <Card key={i} className="animate-pulse">
                <CardHeader>
                  <div className="flex items-center gap-3">
                    <div className="w-12 h-12 bg-slate-200 rounded-lg"></div>
                    <div className="flex-1">
                      <div className="h-5 bg-slate-200 rounded mb-2"></div>
                      <div className="h-4 bg-slate-200 rounded w-3/4"></div>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="flex gap-2 mb-4">
                    <div className="h-6 bg-slate-200 rounded-full w-20"></div>
                    <div className="h-6 bg-slate-200 rounded-full w-16"></div>
                  </div>
                  <div className="h-4 bg-slate-200 rounded"></div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.2 }}
            className="grid gap-6 md:grid-cols-2 lg:grid-cols-3"
          >
            {sortedThemes.map(([theme, stats], index) => {
              const IconComponent = themeIcons[theme] || BookOpen;
              return (
                <motion.div
                  key={theme}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <Card className="hover:shadow-lg transition-all duration-300 cursor-pointer bg-white/80 backdrop-blur-sm border border-slate-200/60">
                    <CardHeader>
                      <div className="flex items-center gap-3">
                        <div className="w-12 h-12 bg-gradient-to-r from-slate-100 to-slate-200 rounded-lg flex items-center justify-center">
                          <IconComponent className="w-6 h-6 text-slate-600" />
                        </div>
                        <div className="flex-1">
                          <CardTitle className="text-lg font-semibold text-slate-900 leading-tight">
                            {theme}
                          </CardTitle>
                          <p className="text-sm text-slate-500">
                            {stats.total} questions
                          </p>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="flex gap-2 mb-4">
                        <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                          Continuers: {stats.continuers}
                        </Badge>
                        <Badge variant="outline" className="bg-indigo-50 text-indigo-700 border-indigo-200">
                          Extension: {stats.extension}
                        </Badge>
                      </div>
                      <div className="text-sm text-slate-500">
                        <span className="font-medium">Years: </span>
                        {stats.yearRange.length > 3 
                          ? `${stats.yearRange[0]} - ${stats.yearRange[stats.yearRange.length - 1]}` 
                          : stats.yearRange.join(", ")
                        }
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              );
            })}
          </motion.div>
        )}
      </div>
    </div>
  );
}
